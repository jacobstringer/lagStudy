# rules for Hex
# @author jens dietrich
#
# spec: https://hexdocs.pm/elixir/Version.html
# a special feature in Hex is the ~> syntax
# this could be classified either as wildcard (var-micro / var-minor) with an additional lower bound constraint,
# or as range
# also check test cases in lexer for addituional rules, in particular handling of dependencies like
# 2.3.0 that are equivalent to ==2.3.0
# https://github.com/elixir-lang/elixir/blob/f47792547b72ee3043da7205a50e4a1fca2a93dd/lib/elixir/test/elixir/version_test.exs#L52
#
# EXPLICIT_STATEMENT ?
# DEFAULT_TOOLING ?
# OTHER_TOOLING ?

# illegal syntex acc. to spec. , but acc. to lexer behave like it has a == prefix
# see https://github.com/elixir-lang/elixir/blob/f47792547b72ee3043da7205a50e4a1fca2a93dd/lib/elixir/test/elixir/version_test.exs#L52
# see also: https://stackoverflow.com/questions/51851622/versions-in-elixir-dependencies
test: 1.2.3
test: 1.0
test: 2.1-dev
test: 1.0.0-alpha.3+20130417140000
match: \d+.\d+(\w|\.|-|\+)*
classify: fixed

# hard requirement
test: ==1.0
test: ==1.2.3
test: == 1.2.3
test: == 1.0.0-alpha.3+20130417140000
match:==\s*(\w|\.|-|\+)+
classify:fixed

# at least
test: >1.0
test: >1.2.3
test: > 1.2.3
test: > 1.0.0-alpha.3+20130417140000
match:>\s*(\w|\.|-|\+)+
classify:at-least

# at least
test: >=1.0
test: >=1.2.3
test: >= 1.2.3
test: >= 1.0.0-alpha.3+20130417140000
match:>=\s*(\w|\.|-|\+)+
classify:at-least

# at most
test: <1.0
test: <1.2.3
test: < 1.2.3
test: < 1.0.0-alpha.3+20130417140000
match:<\s*(\w|\.|-|\+)+
classify:at-most

# at most
test: <=1.0
test: <=1.2.3
test: <= 1.2.3
test: <= 1.0.0-alpha.3+20130417140000
match:<=\s*(\w|\.|-|\+)+
classify:at-most

# range
test: >2.0.0 and <2.1.0
test: > 2.0.0 and < 2.1.0
test: >=2.0.0 and <= 2.1.0
test: >= 2.0.0  and  <2.1.0
match:>=?\s*(\w|\.|-|\+)+\s+and\s+<=?\s*(\w|\.|-|\+)+
classify:range

# var-minor -- could also be classified as range, see above
test: ~> 2.0
test: ~> 2.1
test: ~>2.0
test: ~>12.0
test: ~>2.1-dev
match:\s?~>\s*\d+.\d+(-(\w|\.|-|\+)+)?
classify:var-minor

# var-micro -- could also be classified as range, see above
test: ~> 2.0.0
test: ~> 2.1.3 
test: ~>2.0.4
test: ~>12.24.66
test: ~>2.1.3-dev
test: ~> 1.3.0-beta.0
test: ~> 0.4.0-rc.0
match:\s?~>\s*\d+.\d+.\d+(-(\w|\.|-|\+)+)?
classify:var-micro

# multiple ranges concatenated with or 
# could go into a new multi-range category
test:~> 2.0 or ~> 3.0
test:~> 1.5 or ~>  2.0  or ~> 3.0
test:~> 1.8.6 or ~> 1.9 or ~> 1.10
test:~> 1.1 or ~> 1.3-rc
test:~> 1.0 or ~> 1.1 or ~> 1.2 or ~> 1.3
test:~> 1.0.0-rc or ~> 1.0
match: ~>\s*(\w|\.|-|\+)*(\s+or\s+~>\s+(\w|\.|-|\+)*)+
classify:other

# using and to combine var-micro with an additional upper / lower bound
test:< 0.1.12 and ~> 1.1.0
test:<= 0.1.12 and ~> 1.1.0
match:((>=?)|(<=?))\s+\d+.\d+.\d+(-(\w|.)+)?\s+and\s+~>\s+\d+.\d+.\d+(-(\w|.)+)?
classify:var-micro

# same as before, but in different order
test:~> 1.1.0 and < 0.1.12
test:~> 1.1.0 and <= 0.1.12
match:~>\s+\d+.\d+.\d+(-(\w|.)+)?\s+and\s+((>=?)|(<=?))\s+\d+.\d+.\d+(-(\w|.)+)?	
classify:var-micro

# using and to combine var-minor with an additional upper / lower bound
test:< 0.12 and ~> 0.1
test:<= 0.12 and ~> 0.1
match:((>=?)|(<=?))\s+\d+.\d+(-(\w|.)+)?\s+and\s+~>\s+\d+.\d+(-(\w|.)+)?
classify:var-minor

# same as before, but in different order
test:~> 0.1 and < 0.12
test:~> 0.1 and <= 0.12
match:~>\s+\d+.\d+(-(\w|.)+)?\s+and\s+((<=?)|(>=?))\s+\d+.\d+(-(\w|.)+)?	
classify:var-minor

# more complicated boolean formulas
test:~> 1.1 or ~> 1.3.0-rc and < 1.4.0
test:>= 0.8.0 and < 2.0.0 or 1.0.0-rc.2
test:1.6.3 or 1.6.5 or 1.7.1 or 1.8.6 or ~> 1.9
test:== 0.1.8 or ~> 0.5
match:((~>)|(<=?)|(>=?)|(==))?\s*\d+\.\d+(\w|\.|-|\+)*(\s+((and)|(or))\s+((~>)|(<=?)|(>=?)|(==))?\s*\d+\.\d+(\w|\.|-|\+)*)*
classify:other
