# spec: http://r-pkgs.had.co.nz/description.html
#
# Describes its advice "as inspired by semantic versioning"
#
# "Use this advice to decide:
#
#     Increment patch, e.g. 0.8.2 for a patch: you’ve fixed bugs
#     without adding any significant new features. I’ll often do a
#     patch release if, after release, I discover a show-stopping bug
#     that needs to be fixed ASAP. Most releases will have a patch
#     number of 0.
#
#     Increment minor, e.g. 0.9.0, for a minor release. A minor
#     release can include bug fixes, new features and changes in
#     backward compatibility. This is the most common type of
#     release. It’s perfectly fine to have so many minor releases that
#     you need to use two (or even three!) digits, e.g. 1.17.0.
#
#     Increment major, e.g. 1.0.0, for a major release. This is best
#     reserved for changes that are not backward compatible and that
#     are likely to affect many users. Going from 0.b.c to 1.0.0
#     typically indicates that your package is feature complete with a
#     stable API.
#
#     In practice, backward compatibility is not an all-or-nothing
#     threshold. For example, if you make an API-incompatible change
#     to a rarely-used part of your code, it may not deserve a major
#     number change. But if you fix a bug that many people depend on,
#     it will feel like an API breaking change. Use your best
#     judgement."
#
# * not specified -- assume that this means anything goes
#
# EXPLICIT_STATEMENT ?
# DEFAULT_TOOLING ?
# OTHER_TOOLING ?

# at-least
test: >= 0.2
test: >= 0.3.0.1
test: >= 11.22.33
match:>=\s*\d+(\.\d+)*
classify:at-least

test: > 0.2
test: > 0.3.0.1
test: > 11.22.33
match:>\s*\d+(\.\d+)*
classify:at-least

# at-most
test: <= 0.2
test: <= 0.3.0.1
test: <= 11.22.33
match:<=\s*\d+(\.\d+)*
classify:at-most

test: < 0.2
test: < 0.3.0.1
test: < 11.22.33
match:<\s*\d+(\.\d+)*
classify:at-most

# fixed - specified but not used !
test: == 0.2
test: == 0.3.0.1
test: == 11.22.33
match:==\s*\d+(\.\d+)*
classify:fixed

# any, not specified, unclear whether libraries.io just inserts this if noty declared
test: *
match:\*
classify:any
