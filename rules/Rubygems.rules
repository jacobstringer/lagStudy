# comments start with #
# reference the spec / grammar whenever possible

# spec: https://guides.rubygems.org/patterns/#pessimistic-version-constraint
# article: https://www.activestate.com/blog/2017/09/dealing-ruby-dependency-conflicts (ActiveRuby using prechecked dependencies solved, Bundler for automated dep management)
# article: https://snyk.io/blog/differences-in-version-handling-gems-and-npm/

# It looks like Ruby builds fail when dependencies cannot be resolved. It is possible to force a specific version using options.
# Ruby can include both patch and 'teeny' version numbers: https://www.ruby-lang.org/en/news/2013/12/21/ruby-version-policy-changes-with-2-1-0/
# Some versions have many numbers, thus the open ranges {0,} etc

# explicit reference to semantic versioning in https://guides.rubygems.org/patterns/#pessimistic-version-constraint
# "If your gem properly follows semantic versioning with its versioning scheme, then other Ruby developers can take advantage of this when choosing a version constraint to lock down your gem in their application."
#
# the syntax ~> is known as "twiddle-wakka"
#
# EXPLICIT_STATEMENT ?
# DEFAULT_TOOLING ?
# OTHER_TOOLING ?

# micro range
test: ~> 1.2.3
test: ~>11.3.2
test: >= 2.7.0, ~> 2.7.0
test: ~> 3.1.0, ~> 3.1.1
test:~> 0.4, ~> 0.4.0
match:^\s*((>|~)[^~]+)?~>\s*\d+(\.\d+){2,}[\s"]*(,[^!]*)?$
classify:var-micro


# minor range (place after micro range to avoid false positives)
test: ~> 1.2
test:~>3.4
test:~>3
test: >= 2.5.0, ~> 2.5
test:~> 1.0, >= 1.0.10
match:^\s*((>|~)[^~]+)?~>\s*\d+(\.\d+){0,1}[\s"]*(,[^!]*)?$
classify:var-minor


# fixed
test:=1.3.4
test: = 12.4
test:= 2.4.3, >= 0
test:>= 0, = 1.4
match:^\s*([^,]+,\s*)?=\s*\d+(\.\d+){0,}([-\.]?[a-zA-Z][\w\.-]*\s*)?[\s"]*(,.*)?$
classify:fixed


# Custom ranges
test: < 5.1, >= 3.2
test: < 5.1, > 3.0
test: <= 0.46.0, >= 0.41.2
test: < 2, >= 0.14.10
test: < 13, >= 10.0
match:^\s*(>[^<]*<|<[^>]+>).*$
classify:range


# at least (put below minor, micro and fixed as otherwise false positives will occur)
test: >= 1.2
test:>= 1.10.2
test: >= 4.0.0
test:>= 0, >= 2.1.0
match:^\s*>=?\s*\d+(\.\d+){0,}[\s"]*(,[^!]*)?$
classify:at-least


# At most
test: < 1.3.0
test: < 4.0.0.alpha3
test: <= 2.0.0.beta.20
test: < 2.1.0, <= 2.0.0.d
match:^\s*<=?\s*\w+(\.\w+){0,}[\s"]*(,.*)*$
classify:at-most


# Prerelease ranges
# "Using ~> with prerelease versions will restrict you to prerelease versions only."
# "If you want to allow prereleases and regular releases use a compound requirement" i.e. >= 2.1.1-tag and >= 2.1.2
test: >= 1.2.3-rc2
test: ~> 11.12.1-beta.2
test: >= 4.0.0.beta
test:~> 3.0pre
test:>= 0.1.0.rc5, ~> 0.1.rc1
test: >= 3.0.0.beta3.1, ~> 3.0.0.beta3.1
match:^.*(>=?|~>)\s*\d+(\.\d+){0,4}[-\.]*[a-zA-Z].*$
classify:var-micro


# Except
test: != 0.9.0
test: != 0.5.0, != 0.5.1, != 0.5.2, != 0.5.3, < 0.6.0, >= 0.4.4
test: != 1.2.4, ~> 1.2.1
test: != 1.7.2, >= 1.7.1, ~> 1.7
test: ~> 1.7, != 1.7.2
match:^.*!=.+$
classify:not

